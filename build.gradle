import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

buildscript {
    ext {
        restdocsApiSpecVersion = '0.17.1'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'cmc15'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
}

swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

openapi3 {
    servers = [
            { url = "https://api.previewinsure.com" },
            { url = "http://localhost:8080" }
    ]
    title = "API 문서"
    description = "RestDocsWithSwagger Docs"
    version = "0.0.1"
    format = "yaml"
}

dependencies {
    // springboot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // h2
    runtimeOnly 'com.h2database:h2'

    // mySql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // restDocs + swagger
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion
    swaggerUI 'org.webjars:swagger-ui:4.11.1'

//    // JWT
//    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
//    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
//    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
//    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.37.2'

    // Redis
    implementation('org.springframework.boot:spring-boot-starter-data-redis')
    implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

    // SpringAi
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter:1.0.0-SNAPSHOT'

    // apple login
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.50'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'com.nimbusds:nimbus-jose-jwt:3.10'
    implementation group: 'com.sun.security.auth.module', name: 'psiNtSystem', version: '1.0.0'

}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

        def securitySchemesContent = "  securitySchemes:\n" +   \
                                       "    APIKey:\n" +   \
                                       "      type: apiKey\n" +   \
                                       "      name: Authorization\n" +   \
                                       "      in: header\n" +  \
                                       "security:\n" +
                "  - APIKey: []  # Apply the security scheme here"

        swaggerUIFile.append securitySchemesContent
    }
}

bootJar {
    dependsOn generateSwaggerUISample
    from("${generateSwaggerUISample.outputDir}") {
        into 'static/docs'
    }
}